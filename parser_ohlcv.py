#!/usr/bin/env python3
import urllib.request
import urllib.parse
import json
import os
import re
from datetime import datetime, timedelta
import time
import ssl

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–æ–≤—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
BASE_URL = "https://www.coingecko.com/ru/new-cryptocurrencies"
API_BASE = "https://api.coingecko.com/api/v3"

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
MAX_COINS = 50


def create_ssl_context():
    """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤"""
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
    return context


def fetch_page():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {BASE_URL}", flush=True)

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        req = urllib.request.Request(BASE_URL)
        req.add_header('User-Agent',
                       'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36')
        req.add_header('Accept',
                       'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8')
        req.add_header('Accept-Language', 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7')
        req.add_header('Accept-Encoding', 'gzip, deflate')
        req.add_header('Connection', 'keep-alive')
        req.add_header('Upgrade-Insecure-Requests', '1')

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        context = create_ssl_context()
        response = urllib.request.urlopen(req, context=context, timeout=30)

        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        if response.info().get('Content-Encoding') == 'gzip':
            import gzip
            html = gzip.decompress(response.read()).decode('utf-8')
        else:
            html = response.read().decode('utf-8')

        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(html)} –±–∞–π—Ç", flush=True)
        return html

    except urllib.error.HTTPError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.code} {e.reason}", flush=True)
        if e.code == 403:
            print("üí° CoinGecko –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN", flush=True)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}", flush=True)
        return None


def search_coin_id(coin_name, coin_symbol, retry_count=0):
    """–ò—â–µ—Ç ID –º–æ–Ω–µ—Ç—ã –≤ CoinGecko API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit"""
    print(f"  üîç –ü–æ–∏—Å–∫ ID –¥–ª—è {coin_name} ({coin_symbol})...", flush=True)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_query = coin_symbol.lower()
    url = f"{API_BASE}/search?query={urllib.parse.quote(search_query)}"

    try:
        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'Mozilla/5.0')
        req.add_header('Accept', 'application/json')

        context = create_ssl_context()
        response = urllib.request.urlopen(req, context=context, timeout=15)
        data = json.loads(response.read().decode('utf-8'))

        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª—É
        if 'coins' in data:
            for coin in data['coins']:
                if coin.get('symbol', '').upper() == coin_symbol.upper():
                    found_id = coin['id']
                    found_name = coin.get('name', '')
                    found_symbol = coin.get('symbol', '').upper()

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                    print(f"    üìå –ù–∞–π–¥–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç: {found_name} ({found_symbol}) - ID: {found_id}", flush=True)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    if coin_name.lower() in found_name.lower() or found_name.lower() in coin_name.lower():
                        print(f"    ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å–∏–º–≤–æ–ª—É", flush=True)
                        return found_id
                    else:
                        print(f"    ‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å '{coin_name}', –Ω–∞–π–¥–µ–Ω–æ '{found_name}'",
                              flush=True)
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É, –ø—Ä–æ–±—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        search_query = coin_name.lower()
        url = f"{API_BASE}/search?query={urllib.parse.quote(search_query)}"

        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'Mozilla/5.0')
        req.add_header('Accept', 'application/json')

        response = urllib.request.urlopen(req, context=context, timeout=15)
        data = json.loads(response.read().decode('utf-8'))

        if 'coins' in data and len(data['coins']) > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            best_match = None
            for coin in data['coins'][:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                found_id = coin['id']
                found_name = coin.get('name', '')
                found_symbol = coin.get('symbol', '').upper()

                print(f"    üìå –ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {found_name} ({found_symbol}) - ID: {found_id}", flush=True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
                if found_symbol == coin_symbol.upper():
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª—É: {found_name} ({found_symbol})", flush=True)
                    return found_id

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "3D (MAN)" vs "MAN (3D)")
                if (coin_name.upper() == found_symbol and coin_symbol.upper() == found_name.upper()) or \
                        (f"{coin_symbol} ({coin_name})" == f"{found_name} ({found_symbol})") or \
                        (f"{coin_name} ({coin_symbol})" == f"{found_symbol} ({found_name})"):
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {found_name} ({found_symbol})", flush=True)
                    return found_id

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
                if not best_match:
                    best_match = coin

            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if best_match:
                print(
                    f"    ‚ö†Ô∏è –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {best_match.get('name', '')} ({best_match.get('symbol', '')})",
                    flush=True)
                return best_match['id']

    except urllib.error.HTTPError as e:
        if e.code == 429 and retry_count < 3:
            wait_time = 60 * (retry_count + 1)  # 60, 120, 180 —Å–µ–∫—É–Ω–¥
            print(f"    ‚ö†Ô∏è Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...", flush=True)
            time.sleep(wait_time)
            return search_coin_id(coin_name, coin_symbol, retry_count + 1)
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", flush=True)
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", flush=True)

    return None


def fetch_ohlc_data(coin_id, days=30, retry_count=0):
    """–ü–æ–ª—É—á–∞–µ—Ç OHLCV –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã —Å 4-—á–∞—Å–æ–≤—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º"""
    url = f"{API_BASE}/coins/{coin_id}/ohlc?vs_currency=usd&days={days}"

    try:
        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'Mozilla/5.0')
        req.add_header('Accept', 'application/json')

        context = create_ssl_context()
        response = urllib.request.urlopen(req, context=context, timeout=15)

        data = json.loads(response.read().decode('utf-8'))

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OHLC –¥–∞–Ω–Ω—ã–µ (4-—á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏)
        if data and len(data) > 0:
            ohlc_processed = []

            for candle in data:
                if len(candle) >= 5:
                    timestamp = candle[0]
                    dt = datetime.fromtimestamp(timestamp / 1000)

                    ohlc_processed.append({
                        'timestamp': timestamp,
                        'datetime': dt.isoformat(),
                        'date': dt.strftime('%Y-%m-%d'),
                        'time': dt.strftime('%H:%M:%S'),
                        'open': candle[1],
                        'high': candle[2],
                        'low': candle[3],
                        'close': candle[4]
                    })

            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ohlc_processed)} 4-—á–∞—Å–æ–≤—ã—Ö OHLC —Å–≤–µ—á–µ–π", flush=True)
            return ohlc_processed

    except urllib.error.HTTPError as e:
        if e.code == 404:
            print(f"    ‚ö†Ô∏è OHLC –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", flush=True)
        elif e.code == 429:
            if retry_count < 3:
                print(f"    ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...", flush=True)
                time.sleep(60)
                print(f"    üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLC –¥–ª—è {coin_id}...", flush=True)
                return fetch_ohlc_data(coin_id, days, retry_count + 1)
            else:
                print(f"    ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OHLC", flush=True)
        else:
            print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ {e.code}", flush=True)
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}", flush=True)

    return None


def search_alternative_coin_id(coin_name, coin_symbol, exclude_ids, retry_count=0):
    """–ò—â–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π ID –º–æ–Ω–µ—Ç—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ"""
    if isinstance(exclude_ids, str):
        exclude_ids = [exclude_ids]

    print(f"    üîé –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö ID –¥–ª—è {coin_name} ({coin_symbol}), –∏—Å–∫–ª—é—á–∞—è {', '.join(exclude_ids)}...",
          flush=True)

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
    search_queries = [
        f"{coin_symbol} new",
        f"{coin_name} 2025",
        f"{coin_symbol} v2",
        f"new {coin_symbol}",
        coin_name.lower(),
        coin_symbol.lower()
    ]

    found_alternatives = []

    for query in search_queries:
        url = f"{API_BASE}/search?query={urllib.parse.quote(query)}"

        try:
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'Mozilla/5.0')
            req.add_header('Accept', 'application/json')

            context = create_ssl_context()
            response = urllib.request.urlopen(req, context=context, timeout=15)
            data = json.loads(response.read().decode('utf-8'))

            if 'coins' in data:
                for coin in data['coins']:
                    found_id = coin['id']
                    found_symbol = coin.get('symbol', '').upper()

                    # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ ID –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                    if found_symbol == coin_symbol.upper() and found_id not in exclude_ids:
                        if found_id not in [alt['id'] for alt in found_alternatives]:
                            found_alternatives.append({
                                'id': found_id,
                                'name': coin.get('name', ''),
                                'symbol': found_symbol
                            })
                            print(
                                f"    üìç –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {coin.get('name', '')} ({found_symbol}) - ID: {found_id}",
                                flush=True)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if query != search_queries[-1]:
                time.sleep(1)

        except urllib.error.HTTPError as e:
            if e.code == 429 and retry_count < 1:
                print(f"    ‚ö†Ô∏è Rate limit –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤. –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...", flush=True)
                time.sleep(30)
                return search_alternative_coin_id(coin_name, coin_symbol, exclude_ids, retry_count + 1)
        except Exception:
            continue

    return found_alternatives


def get_coin_age_days(added_date_str):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –º–æ–Ω–µ—Ç—ã –≤ –¥–Ω—è—Ö"""
    try:
        added_date = datetime.strptime(added_date_str, '%Y-%m-%d')
        now = datetime.now()
        days_diff = (now - added_date).days
        return days_diff
    except:
        return 0


def is_older_than_two_days(added_date_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–∞—Ä—à–µ –ª–∏ –º–æ–Ω–µ—Ç–∞ –¥–≤—É—Ö –¥–Ω–µ–π"""
    try:
        added_date = datetime.strptime(added_date_str, '%Y-%m-%d')
        now = datetime.now()
        days_diff = (now - added_date).days
        return days_diff >= 2
    except:
        return False


def parse_html_limited(html, limit=MAX_COINS):
    """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –æ –ø–µ—Ä–≤—ã—Ö N –º–æ–Ω–µ—Ç–∞—Ö"""
    print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ HTML (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limit} –º–æ–Ω–µ—Ç)...", flush=True)

    cryptos = []

    try:
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
        table_pattern = r'<tr[^>]*class="[^"]*hover:tw-bg[^"]*"[^>]*>(.*?)</tr>'
        rows = re.findall(table_pattern, html, re.DOTALL)

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}", flush=True)
        print(f"üéØ –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {limit} —Å—Ç—Ä–æ–∫", flush=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–æ–∫
        rows_to_process = rows[:limit] if len(rows) > limit else rows

        for i, row in enumerate(rows_to_process):
            try:
                crypto = parse_row(row)
                if crypto:
                    cryptos.append(crypto)
                    print(f"‚úÖ [{i + 1}/{limit}] –ù–∞–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: {crypto['name']} ({crypto['symbol']})", flush=True)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i + 1}: {e}", flush=True)
                continue

        return cryptos

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}", flush=True)
        return []


def parse_row(row_html):
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã"""
    crypto = {}

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ <td>
    td_pattern = r'<td[^>]*>(.*?)</td>'
    cells = re.findall(td_pattern, row_html, re.DOTALL)

    if len(cells) < 11:
        return None

    # –ò–Ω–¥–µ–∫—Å 2 - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª
    name_cell = cells[2]

    # –ò—â–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
    text_pattern = r'>([^<>]+)<'
    all_texts = re.findall(text_pattern, name_cell)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –∏—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    crypto['name'] = "Unknown"
    crypto['symbol'] = ""

    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
    for text in all_texts:
        clean = text.strip()
        if clean and len(clean) > 1:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∏—Å–ª–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if not clean.startswith('$') and not clean.startswith('%') and not clean.replace(',', '').replace('.',
                                                                                                              '').isdigit():
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                if any(c.isalpha() for c in clean):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–∏–º–≤–æ–ª–æ–º (–æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
                    if len(clean) > 5 or not clean.isupper():
                        crypto['name'] = clean
                        break
                    elif crypto['symbol'] == "":
                        crypto['symbol'] = clean

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∏—â–µ–º –≤ img alt –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    if crypto['name'] == "Unknown":
        img_pattern = r'<img[^>]*alt="([^"]+)"[^>]*>'
        img_match = re.search(img_pattern, name_cell)
        if img_match:
            crypto['name'] = img_match.group(1).strip()

    # –ï—â–µ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ - –∏—â–µ–º –≤ title –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    if crypto['name'] == "Unknown":
        title_pattern = r'title="([^"]+)"'
        title_matches = re.findall(title_pattern, name_cell)
        for title in title_matches:
            if title and len(title) > 2 and not title.startswith('$'):
                crypto['name'] = title
                break

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏
    if not crypto['symbol']:
        # –ò—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        for text in all_texts:
            clean = text.strip()
            if clean and 2 <= len(clean) <= 10 and clean.isupper() and clean.isalpha():
                crypto['symbol'] = clean
                break

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–∞—Ä—Å–∏–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    # –ò–Ω–¥–µ–∫—Å 3 - —Ü–µ–Ω–∞
    price_text = clean_text(cells[3]) if len(cells) > 3 else ""
    crypto['price'] = price_text if price_text else "N/A"

    # –ò–Ω–¥–µ–∫—Å 4 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á
    change_text = clean_text(cells[4]) if len(cells) > 4 else ""
    percent_match = re.search(r'([-+]?\d+[,.]?\d*%)', change_text)
    if percent_match:
        crypto['change_24h'] = percent_match.group(1)
    else:
        crypto['change_24h'] = change_text if change_text else "N/A"

    # –ò–Ω–¥–µ–∫—Å 5 - –±–ª–æ–∫—á–µ–π–Ω/–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
    crypto['chain'] = clean_text(cells[5]) if len(cells) > 5 else "Unknown"

    # –ò–Ω–¥–µ–∫—Å 7 - Market Cap
    crypto['market_cap'] = clean_text(cells[7]) if len(cells) > 7 else "N/A"

    # –ò–Ω–¥–µ–∫—Å 9 - FDV
    crypto['fdv'] = clean_text(cells[9]) if len(cells) > 9 else "N/A"

    # –ò–Ω–¥–µ–∫—Å 10 - –¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    added_text = clean_text(cells[10]) if len(cells) > 10 else "–Ω–µ–¥–∞–≤–Ω–æ"
    crypto['added'] = parse_added_date(added_text)
    crypto['added_raw'] = added_text

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    crypto['parsed_at'] = datetime.now().isoformat()

    return crypto


def clean_text(html):
    """–û—á–∏—â–∞–µ—Ç HTML –æ—Ç —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
    text = re.sub(r'<[^>]+>', '', html)
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = ' '.join(text.split())
    return text.strip()


def parse_added_date(added_text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"""
    now = datetime.now()

    if "–Ω–µ–¥–∞–≤–Ω–æ" in added_text:
        return (now - timedelta(minutes=30)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ 1 —á–∞—Å–∞" in added_text:
        return (now - timedelta(hours=1)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ" in added_text and "—á–∞—Å" in added_text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        hours_match = re.search(r'–æ–∫–æ–ª–æ (\d+) —á–∞—Å', added_text)
        if hours_match:
            hours = int(hours_match.group(1))
            return (now - timedelta(hours=hours)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ 1 –¥–Ω—è" in added_text or "–æ–∫–æ–ª–æ –¥–Ω—è" in added_text:
        return (now - timedelta(days=1)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ" in added_text and "–¥–Ω" in added_text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days_match = re.search(r'–æ–∫–æ–ª–æ (\d+) –¥–Ω', added_text)
        if days_match:
            days = int(days_match.group(1))
            return (now - timedelta(days=days)).strftime('%Y-%m-%d')
    elif "–¥–Ω" in added_text:
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç "1 –¥–µ–Ω—å", "2 –¥–Ω—è"
        days_match = re.search(r'(\d+)\s*–¥–Ω', added_text)
        if days_match:
            days = int(days_match.group(1))
            return (now - timedelta(days=days)).strftime('%Y-%m-%d')

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
    return now.strftime('%Y-%m-%d')


def get_log_dir():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤"""
    for path in ['/app/logs', './logs', '.']:
        if os.path.exists(path) and os.access(path, os.W_OK):
            return path
        try:
            os.makedirs(path, exist_ok=True)
            return path
        except:
            continue
    return '.'


def save_data(cryptos):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON"""
    log_dir = get_log_dir()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
    data = {
        'timestamp': datetime.now().isoformat(),
        'source': BASE_URL,
        'count': len(cryptos),
        'limit': MAX_COINS,
        'cryptos': cryptos
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    data_file = os.path.join(log_dir, 'last_50_cryptos.json')
    try:
        with open(data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {data_file}", flush=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", flush=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history_file = os.path.join(log_dir, f'last_50_cryptos_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
    try:
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üìÑ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {history_file}", flush=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}", flush=True)


def generate_report(cryptos):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏"""
    log_dir = get_log_dir()
    report_file = os.path.join(log_dir, 'last_50_cryptos_report.txt')

    try:
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\n")
            f.write("–ü–û–°–õ–ï–î–ù–ò–ï 50 –ù–û–í–´–• –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ –ù–ê COINGECKO\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {BASE_URL}\n")
            f.write("=" * 80 + "\n\n")

            f.write(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(cryptos)} –º–æ–Ω–µ—Ç\n")

            # –°—á–∏—Ç–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å OHLCV
            coins_with_ohlcv = sum(1 for c in cryptos if 'ohlcv' in c and c['ohlcv'])
            f.write(f"–ú–æ–Ω–µ—Ç —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏ (—Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π): {coins_with_ohlcv}\n\n")

            f.write("–°–ü–ò–°–û–ö –ú–û–ù–ï–¢:\n")
            f.write("-" * 80 + "\n")

            for i, crypto in enumerate(cryptos, 1):
                f.write(f"\n{i}. {crypto['name']} ({crypto['symbol']})\n")
                f.write(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {crypto['chain']}\n")
                f.write(f"   –¶–µ–Ω–∞: {crypto['price']}\n")
                f.write(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {crypto['change_24h']}\n")
                f.write(f"   Market Cap: {crypto['market_cap']}\n")
                f.write(f"   FDV: {crypto['fdv']}\n")
                f.write(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {crypto['added_raw']} ({crypto['added']})\n")

                # –ï—Å–ª–∏ –µ—Å—Ç—å OHLCV –¥–∞–Ω–Ω—ã–µ
                if 'ohlcv' in crypto and crypto['ohlcv']:
                    f.write(f"   üìä OHLCV –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π, 4-—á–∞—Å–æ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º):\n")
                    for j, candle in enumerate(crypto['ohlcv'][-10:]):
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                        full_datetime = datetime.fromisoformat(candle['datetime']).strftime('%Y-%m-%d %H:%M:%S')
                        f.write(
                            f"      {j + 1}. {full_datetime} - O: {candle['open']:.8f}, H: {candle['high']:.8f}, L: {candle['low']:.8f}, C: {candle['close']:.8f}\n")

        print(f"üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}", flush=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}", flush=True)


def main():
    print("=" * 80, flush=True)
    print("üöÄ –ü–ê–†–°–ï–† –ü–û–°–õ–ï–î–ù–ò–• 50 –ù–û–í–´–• –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ COINGECKO –° OHLCV", flush=True)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", flush=True)
    print("=" * 80 + "\n", flush=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    html = fetch_page()

    if not html:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", flush=True)
        save_data([])
        return

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    cryptos = parse_html_limited(html, limit=MAX_COINS)

    if cryptos:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(cryptos)} –º–æ–Ω–µ—Ç", flush=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –º–æ–Ω–µ—Ç—ã —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π –∏ –ø–æ–ª—É—á–∞–µ–º –¥–ª—è –Ω–∏—Ö OHLCV
        print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ 4-—á–∞—Å–æ–≤—ã—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π...\n", flush=True)

        ohlcv_count = 0
        for crypto in cryptos:
            if is_older_than_two_days(crypto['added']):
                print(f"üîç {crypto['name']} ({crypto['symbol']}) - –º–æ–Ω–µ—Ç–∞ —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π", flush=True)

                # –ò—â–µ–º ID –º–æ–Ω–µ—Ç—ã
                coin_id = search_coin_id(crypto['name'], crypto['symbol'])

                if coin_id:
                    # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                    time.sleep(3)  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 1.5 –¥–æ 3 —Å–µ–∫—É–Ω–¥

                    # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ —Å 4-—á–∞—Å–æ–≤—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º
                    ohlcv = fetch_ohlc_data(coin_id, days=30)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

                    if ohlcv:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π –≤–æ–∑—Ä–∞—Å—Ç—É –º–æ–Ω–µ—Ç—ã
                        coin_age_days = get_coin_age_days(crypto['added'])
                        max_expected_candles = (coin_age_days * 24) // 4 + 6  # +6 –¥–ª—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
                        actual_candles = len(ohlcv)

                        print(
                            f"    üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –≤–æ–∑—Ä–∞—Å—Ç –º–æ–Ω–µ—Ç—ã {coin_age_days} –¥–Ω–µ–π, –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞–∫—Å. {max_expected_candles} —Å–≤–µ—á–µ–π",
                            flush=True)
                        print(f"    üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {actual_candles}", flush=True)

                        if actual_candles > max_expected_candles * 2:  # –ï—Å–ª–∏ —Å–≤–µ—á–µ–π –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ
                            print(
                                f"    ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π ({actual_candles}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç—É –º–æ–Ω–µ—Ç—ã ({coin_age_days} –¥–Ω–µ–π)",
                                flush=True)
                            print(f"    ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–π–¥–µ–Ω–∞ –¥—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞ —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º!", flush=True)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å–≤–µ—á—É
                            if ohlcv:
                                first_candle_date = datetime.fromisoformat(ohlcv[0]['datetime'])
                                days_since_first_candle = (datetime.now() - first_candle_date).days
                                print(
                                    f"    üìÖ –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞ –¥–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞: {first_candle_date.strftime('%Y-%m-%d')} ({days_since_first_candle} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)",
                                    flush=True)

                            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É —Å —Ç–∞–∫–∏–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º
                            print(f"    üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –±–æ–ª–µ–µ –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã {crypto['name']} ({crypto['symbol']})...",
                                  flush=True)

                            # –°–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö ID
                            checked_ids = [coin_id]
                            found_suitable = False

                            # –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö ID
                            alternatives = search_alternative_coin_id(crypto['name'], crypto['symbol'], checked_ids)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                            for alt in alternatives:
                                if found_suitable:
                                    break

                                alternative_id = alt['id']
                                print(f"    üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–Ω–µ—Ç—É: {alt['name']} - ID: {alternative_id}",
                                      flush=True)
                                time.sleep(3)

                                # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–Ω–µ—Ç—ã
                                alt_ohlcv = fetch_ohlc_data(alternative_id, days=30)

                                if alt_ohlcv:
                                    alt_candles_count = len(alt_ohlcv)
                                    print(f"    üìä –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞: –ø–æ–ª—É—á–µ–Ω–æ {alt_candles_count} —Å–≤–µ—á–µ–π",
                                          flush=True)

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å–≤–µ—á—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–Ω–µ—Ç—ã
                                    alt_first_candle_date = datetime.fromisoformat(alt_ohlcv[0]['datetime'])
                                    alt_days_since_first = (datetime.now() - alt_first_candle_date).days
                                    print(
                                        f"    üìÖ –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞: {alt_first_candle_date.strftime('%Y-%m-%d')} ({alt_days_since_first} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)",
                                        flush=True)

                                    # –ï—Å–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
                                    if alt_candles_count <= max_expected_candles * 1.5:
                                        print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–Ω–µ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–µ–º ID: {alternative_id}",
                                              flush=True)
                                        crypto['ohlcv'] = alt_ohlcv
                                        crypto['coin_id'] = alternative_id
                                        crypto['candles_count'] = alt_candles_count
                                        crypto['expected_max_candles'] = max_expected_candles
                                        ohlcv_count += 1
                                        found_suitable = True
                                        break
                                    else:
                                        print(
                                            f"    ‚ùå –ú–æ–Ω–µ—Ç–∞ {alternative_id} —Ç–æ–∂–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è ({alt_candles_count} —Å–≤–µ—á–µ–π)",
                                            flush=True)
                                        checked_ids.append(alternative_id)

                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–Ω–µ—Ç—É —Å—Ä–µ–¥–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
                            if not found_suitable:
                                print(f"    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ —Å—Ä–µ–¥–∏ {len(alternatives)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
                                      flush=True)
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                                crypto['ohlcv'] = ohlcv
                                crypto['coin_id'] = coin_id
                                crypto['candles_count'] = actual_candles
                                crypto['expected_max_candles'] = max_expected_candles
                                crypto[
                                    'warning'] = f"–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω–∞—è –º–æ–Ω–µ—Ç–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {max_expected_candles} —Å–≤–µ—á–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {actual_candles}"
                                ohlcv_count += 1
                        else:
                            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
                            crypto['ohlcv'] = ohlcv
                            crypto['coin_id'] = coin_id
                            crypto['candles_count'] = actual_candles
                            crypto['expected_max_candles'] = max_expected_candles
                            ohlcv_count += 1
                else:
                    print(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –º–æ–Ω–µ—Ç—ã\n", flush=True)
            else:
                print(f"‚ÑπÔ∏è {crypto['name']} ({crypto['symbol']}) - –º–æ–Ω–µ—Ç–∞ –º–ª–∞–¥—à–µ 2 –¥–Ω–µ–π, OHLCV –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è",
                      flush=True)

        print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ OHLCV –¥–ª—è {ohlcv_count} –º–æ–Ω–µ—Ç", flush=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        save_data(cryptos)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        generate_report(cryptos)

        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\nüìà –ü–û–°–õ–ï–î–ù–ò–ï 50 –ú–û–ù–ï–¢:", flush=True)
        print("-" * 100, flush=True)
        for i, crypto in enumerate(cryptos, 1):
            has_ohlcv = "‚úì" if 'ohlcv' in crypto and crypto['ohlcv'] else " "
            print(
                f"{i:2d}. [{has_ohlcv}] {crypto['name']:<25} ({crypto['symbol']:<10}) - {crypto['chain']:<15} - {crypto['added_raw']}",
                flush=True)
        print("-" * 100, flush=True)
        print(f"[‚úì] - –º–æ–Ω–µ—Ç—ã —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏ ({ohlcv_count} —à—Ç.)", flush=True)

    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö", flush=True)
        save_data([])

    print("\n‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É", flush=True)
    print("=" * 80 + "\n", flush=True)


if __name__ == "__main__":
    main()