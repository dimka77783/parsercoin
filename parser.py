#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å CoinGecko
–ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç OHLC –¥–ª—è –º–æ–Ω–µ—Ç —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
"""
import urllib.request
import json
import os
import re
from datetime import datetime, timedelta
import time
import ssl
import psycopg2
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "https://www.coingecko.com/ru/new-cryptocurrencies"
API_BASE = "https://api.coingecko.com/api/v3"
MAX_COINS = int(os.environ.get('MAX_COINS', 30))
MIN_AGE_DAYS = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å OHLC –ø–æ—Å–ª–µ 1 –¥–Ω—è

# –ó–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
DELAYS = {
    'between_coins': 5,
    'before_search': 2,
    'after_ohlc': 3,
    'rate_limit': 60
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': os.environ.get('DB_HOST', 'localhost'),
    'port': os.environ.get('DB_PORT', '5432'),
    'database': os.environ.get('DB_NAME', 'crypto_db'),
    'user': os.environ.get('DB_USER', 'crypto_user'),
    'password': os.environ.get('DB_PASSWORD', 'crypto_password')
}


def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    try:
        return psycopg2.connect(**DB_CONFIG)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None


def create_ssl_context():
    """SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è HTTPS"""
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
    return context


def fetch_page():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–≤—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏"""
    print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã CoinGecko...")

    try:
        req = urllib.request.Request(BASE_URL)
        req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
        req.add_header('Accept', 'text/html,application/xhtml+xml')

        context = create_ssl_context()
        response = urllib.request.urlopen(req, context=context, timeout=30)

        if response.info().get('Content-Encoding') == 'gzip':
            import gzip
            html = gzip.decompress(response.read()).decode('utf-8')
        else:
            html = response.read().decode('utf-8')

        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(html)} –±–∞–π—Ç")
        return html

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None


def parse_html(html):
    """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö"""
    print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–∞—Ö...")

    cryptos = []

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    table_pattern = r'<tr[^>]*class="[^"]*hover:tw-bg[^"]*"[^>]*>(.*?)</tr>'
    rows = re.findall(table_pattern, html, re.DOTALL)

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)}, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º: {min(len(rows), MAX_COINS)}")

    for i, row in enumerate(rows[:MAX_COINS]):
        crypto = parse_row(row)
        if crypto:
            cryptos.append(crypto)
            print(f"  [{i + 1}] {crypto['name']} ({crypto['symbol']})")

    return cryptos


def parse_row(row_html):
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã"""
    crypto = {}

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏
    cells = re.findall(r'<td[^>]*>(.*?)</td>', row_html, re.DOTALL)
    if len(cells) < 11:
        return None

    # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª (—è—á–µ–π–∫–∞ 2) - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    name_cell = cells[2]

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Å—ã–ª–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–Ω–µ—Ç—ã
    name_link = re.search(r'<a[^>]*href="[^"]*"[^>]*>([^<]+)</a>', name_cell)
    if name_link:
        crypto['name'] = name_link.group(1).strip()
    else:
        crypto['name'] = "Unknown"

    # –ò—â–µ–º —Å–∏–º–≤–æ–ª –≤ span —Å –∫–ª–∞—Å—Å–æ–º
    symbol_match = re.search(r'<span[^>]*class="[^"]*tw-text-gray-500[^"]*"[^>]*>([^<]+)</span>', name_cell)
    if symbol_match:
        crypto['symbol'] = symbol_match.group(1).strip()
    else:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞
        texts = re.findall(r'>([^<>]+)<', name_cell)
        crypto['symbol'] = ""
        for text in texts:
            clean = text.strip()
            if clean and len(clean) <= 10 and clean.isupper() and clean != crypto['name']:
                crypto['symbol'] = clean
                break

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    crypto['price'] = clean_text(cells[3]) if len(cells) > 3 else "N/A"
    crypto['change_24h'] = extract_percent(cells[4]) if len(cells) > 4 else "N/A"
    crypto['chain'] = clean_text(cells[5]) if len(cells) > 5 else "Unknown"
    crypto['market_cap'] = clean_text(cells[7]) if len(cells) > 7 else "N/A"
    crypto['fdv'] = clean_text(cells[9]) if len(cells) > 9 else "N/A"

    # –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    added_text = clean_text(cells[10]) if len(cells) > 10 else "–Ω–µ–¥–∞–≤–Ω–æ"
    crypto['added'] = parse_date(added_text)
    crypto['added_raw'] = added_text

    return crypto


def clean_text(html):
    """–û—á–∏—â–∞–µ—Ç HTML –æ—Ç —Ç–µ–≥–æ–≤"""
    text = re.sub(r'<[^>]+>', '', html)
    return ' '.join(text.split()).strip()


def extract_percent(cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ —è—á–µ–π–∫–∏"""
    text = clean_text(cell)
    match = re.search(r'([-+]?\d+[,.]?\d*%)', text)
    return match.group(1) if match else text or "N/A"


def parse_date(text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–∞—Ç—ã –≤ YYYY-MM-DD"""
    now = datetime.now()

    if "–Ω–µ–¥–∞–≤–Ω–æ" in text or "–æ–∫–æ–ª–æ 1 —á–∞—Å–∞" in text:
        return now.strftime('%Y-%m-%d')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞
    days_match = re.search(r'(\d+)\s*–¥–Ω', text)
    if days_match:
        days = int(days_match.group(1))
        return (now - timedelta(days=days)).strftime('%Y-%m-%d')

    hours_match = re.search(r'(\d+)\s*—á–∞—Å', text)
    if hours_match:
        hours = int(hours_match.group(1))
        return (now - timedelta(hours=hours)).strftime('%Y-%m-%d')

    return now.strftime('%Y-%m-%d')


def search_coin_id(name, symbol):
    """–ò—â–µ—Ç ID –º–æ–Ω–µ—Ç—ã –≤ CoinGecko API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    print(f"  üîç –ü–æ–∏—Å–∫ ID –¥–ª—è {name} ({symbol})...")

    time.sleep(DELAYS['before_search'])

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
    search_queries = []
    if symbol:
        search_queries.append(symbol.lower())
    if name and name != "Unknown":
        search_queries.append(name.lower())

    for query in search_queries:
        if not query:
            continue

        url = f"{API_BASE}/search?query={urllib.parse.quote(query)}"

        try:
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'Mozilla/5.0')
            req.add_header('Accept', 'application/json')

            context = create_ssl_context()
            response = urllib.request.urlopen(req, context=context, timeout=15)
            data = json.loads(response.read().decode('utf-8'))

            if 'coins' in data and data['coins']:
                # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª—É
                if symbol:
                    for coin in data['coins']:
                        if coin.get('symbol', '').upper() == symbol.upper():
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞ (–Ω–µ —Å—Ç–∞—Ä–∞—è —Å —Ç–∞–∫–∏–º –∂–µ —Å–∏–º–≤–æ–ª–æ–º)
                            print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω: {coin['id']}")
                            return coin['id']

                # –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è
                if name and name != "Unknown":
                    name_lower = name.lower()
                    for coin in data['coins']:
                        coin_name = coin.get('name', '').lower()
                        if name_lower in coin_name or coin_name in name_lower:
                            print(f"    ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {coin['id']}")
                            return coin['id']

                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                first_coin = data['coins'][0]
                first_symbol = first_coin.get('symbol', '').upper()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                if symbol and (first_symbol == symbol.upper() or
                               symbol.upper() in first_symbol or
                               first_symbol in symbol.upper()):
                    print(f"    ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {first_coin['id']}")
                    return first_coin['id']

        except urllib.error.HTTPError as e:
            if e.code == 429:
                print(f"    ‚ö†Ô∏è Rate limit, –æ–∂–∏–¥–∞–Ω–∏–µ {DELAYS['rate_limit']} —Å–µ–∫...")
                time.sleep(DELAYS['rate_limit'])
            else:
                print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ {e.code}")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")

    print(f"    ‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None


def fetch_ohlc(coin_id, age_days):
    """–ü–æ–ª—É—á–∞–µ—Ç OHLC –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –º–æ–Ω–µ—Ç—ã"""
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    # –î–ª—è –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ –∏—Ö –≤—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è + 1 –¥–µ–Ω—å
    days_to_fetch = min(age_days + 1, 30)

    url = f"{API_BASE}/coins/{coin_id}/ohlc?vs_currency=usd&days={days_to_fetch}"

    try:
        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'Mozilla/5.0')
        req.add_header('Accept', 'application/json')

        context = create_ssl_context()
        response = urllib.request.urlopen(req, context=context, timeout=20)
        data = json.loads(response.read().decode('utf-8'))

        if data:
            ohlc_data = []
            for candle in data:
                if len(candle) >= 5:
                    timestamp = candle[0]
                    dt = datetime.fromtimestamp(timestamp / 1000)

                    ohlc_data.append({
                        'timestamp': timestamp,
                        'datetime': dt,
                        'date': dt.date(),
                        'time': dt.time(),
                        'open': candle[1],
                        'high': candle[2],
                        'low': candle[3],
                        'close': candle[4]
                    })

            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ohlc_data)} —Å–≤–µ—á–µ–π (–∑–∞ {days_to_fetch} –¥–Ω–µ–π)")
            time.sleep(DELAYS['after_ohlc'])
            return ohlc_data

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ OHLC: {e}")

    return None


def save_to_database(cryptos):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
    conn = get_db_connection()
    if not conn:
        return

    cursor = conn.cursor()
    new_count = 0
    updated_count = 0
    ohlc_count = 0

    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...")

    try:
        for crypto in cryptos:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            cursor.execute("""
                SELECT id, ohlc_table_name, coin_gecko_id FROM cryptocurrencies 
                WHERE symbol = %s AND added_date = %s
            """, (crypto['symbol'], crypto['added']))

            existing = cursor.fetchone()

            if existing:
                crypto_id, ohlc_table, existing_coin_id = existing

                # –û–±–Ω–æ–≤–ª—è–µ–º coin_gecko_id –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
                if crypto.get('coin_id') and not existing_coin_id:
                    cursor.execute("""
                        UPDATE cryptocurrencies 
                        SET coin_gecko_id = %s 
                        WHERE id = %s
                    """, (crypto['coin_id'], crypto_id))

                updated_count += 1
            else:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É
                cursor.execute("""
                    INSERT INTO cryptocurrencies 
                    (name, symbol, chain, price, change_24h, market_cap, 
                     fdv, added_date, added_raw, coin_gecko_id)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    RETURNING id, ohlc_table_name
                """, (
                    crypto['name'], crypto['symbol'], crypto['chain'],
                    crypto['price'], crypto['change_24h'], crypto['market_cap'],
                    crypto['fdv'], crypto['added'], crypto['added_raw'],
                    crypto.get('coin_id')
                ))
                crypto_id, ohlc_table = cursor.fetchone()
                new_count += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º OHLC –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'ohlc' in crypto and crypto['ohlc'] and ohlc_table:
                for candle in crypto['ohlc']:
                    try:
                        cursor.execute(f"""
                            INSERT INTO {ohlc_table} 
                            (timestamp, datetime, date, time, open, high, low, close)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                            ON CONFLICT (timestamp) DO NOTHING
                        """, (
                            candle['timestamp'], candle['datetime'],
                            candle['date'], candle['time'],
                            candle['open'], candle['high'],
                            candle['low'], candle['close']
                        ))
                        if cursor.rowcount > 0:
                            ohlc_count += 1
                    except:
                        pass

            conn.commit()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

    print(f"‚úÖ –ù–æ–≤—ã—Ö –º–æ–Ω–µ—Ç: {new_count}")
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"‚úÖ OHLC –∑–∞–ø–∏—Å–µ–π: {ohlc_count}")


def main():
    print("=" * 60)
    print("üöÄ –ü–ê–†–°–ï–† –ù–û–í–´–• –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è OHLC: {MIN_AGE_DAYS} –¥–µ–Ω—å")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    conn = get_db_connection()
    if not conn:
        sys.exit(1)
    conn.close()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    html = fetch_page()
    if not html:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        return

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    cryptos = parse_html(html)
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cryptos)} –º–æ–Ω–µ—Ç")

    # –ü–æ–ª—É—á–∞–µ–º OHLC –¥–ª—è –º–æ–Ω–µ—Ç —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
    print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ OHLC –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –º–æ–Ω–µ—Ç —Å—Ç–∞—Ä—à–µ {MIN_AGE_DAYS} –¥–Ω—è)...")

    for i, crypto in enumerate(cryptos):
        if i > 0:
            time.sleep(DELAYS['between_coins'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –º–æ–Ω–µ—Ç—ã
        age_days = (datetime.now() - datetime.strptime(crypto['added'], '%Y-%m-%d')).days

        if age_days >= MIN_AGE_DAYS:
            print(f"\nüîç {crypto['name']} ({crypto['symbol']}) - {age_days} –¥–Ω–µ–π")

            # –ò—â–µ–º ID
            coin_id = search_coin_id(crypto['name'], crypto['symbol'])
            if coin_id:
                crypto['coin_id'] = coin_id

                # –ü–æ–ª—É—á–∞–µ–º OHLC —Å —É—á–µ—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞
                ohlc = fetch_ohlc(coin_id, age_days)
                if ohlc:
                    crypto['ohlc'] = ohlc
        else:
            print(f"‚è≠Ô∏è  {crypto['name']} - —Å–ª–∏—à–∫–æ–º –Ω–æ–≤–∞—è ({age_days} –¥–Ω–µ–π, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_AGE_DAYS})")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_to_database(cryptos)

    print("\n‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    print("=" * 60)


if __name__ == "__main__":
    main()