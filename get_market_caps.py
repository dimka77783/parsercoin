import requests
from bs4 import BeautifulSoup
import time
import csv

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0 Safari/537.36',
    'Accept-Language': 'en-US,en;q=0.9',
    'Referer': 'https://www.google.com/',
    'Accept-Encoding': 'gzip, deflate, br',
    'Connection': 'keep-alive'
}

# –ë–∞–∑–æ–≤—ã–π URL –ø–æ –¢–í–û–ï–ú–£ –∑–∞–ø—Ä–æ—Å—É
BASE_URL = "https://www.coingecko.com/ru/new-cryptocurrencies/"


def slugify(name):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –º–æ–Ω–µ—Ç—ã –≤ URL-friendly —Å—Ç—Ä–æ–∫—É"""
    return name.strip().lower().replace(' ', '-')


def get_market_cap_from_coin_page(url, max_retries=3):
    """–ü–æ–ª—É—á–∞–µ—Ç Market Cap —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–Ω–µ—Ç—ã"""
    if not url or url == "–ù–µ—Ç —Å—Å—ã–ª–∫–∏":
        print("üö´ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞")
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    for attempt in range(1, max_retries + 1):
        try:
            response = requests.get(url, headers=HEADERS, timeout=10)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')

                # –ò—â–µ–º –±–ª–æ–∫–∏ —Å –∫–ª–∞—Å—Å–æ–º no-wrap –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Market Cap
                no_wrap_blocks = soup.find_all('div', {'class': 'no-wrap'})

                for block in no_wrap_blocks:
                    text = block.get_text(strip=True)
                    if 'market cap' in text.lower():
                        return text

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π
                if no_wrap_blocks:
                    return no_wrap_blocks[0].get_text(strip=True)

                return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            elif response.status_code == 403:
                print(f"‚ùå –û—à–∏–±–∫–∞ 403 –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {url}")
                time.sleep(10)
            else:
                print(f"–û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {url}")
                time.sleep(3 * attempt)
        except Exception as e:
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ ({attempt} –ø–æ–ø—ã—Ç–∫–∞): {e}")
            time.sleep(3 * attempt)

    return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"


def save_market_caps_to_csv(data, filename="market_caps.csv"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV"""
    fieldnames = ['name', 'symbol', 'url', 'market_cap']

    with open(filename, mode='w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)

    print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")


def read_coins_from_csv(filename="newcoin.csv"):
    """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏–∑ CSV"""
    coins = []

    try:
        with open(filename, newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                coins.append({
                    'name': row.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏'),
                    'symbol': row.get('symbol', '‚Äî')
                })
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

    return coins


def main():
    print("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏...\n")

    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ newcoin.csv
    cryptos = read_coins_from_csv()

    if not cryptos:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    results = []

    for crypto in cryptos:
        name = crypto.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        symbol = crypto.get('symbol', '‚Äî')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ –¢–ê–ö–û–ô URL
        coin_url = BASE_URL + slugify(name)

        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {name} ({symbol})")
        market_cap = get_market_cap_from_coin_page(coin_url)
        print(f"üìà –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {market_cap}\n")

        results.append({
            'name': name,
            'symbol': symbol,
            'url': coin_url,
            'market_cap': market_cap
        })

        time.sleep(3)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
    save_market_caps_to_csv(results)


if __name__ == "__main__":
    main()