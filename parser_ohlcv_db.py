#!/usr/bin/env python3
"""
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ OHLC –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
"""
import urllib.request
import urllib.parse
import json
import os
import re
from datetime import datetime, timedelta
import time
import ssl
import psycopg2
from psycopg2.extras import RealDictCursor
import sys

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–æ–≤—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
BASE_URL = "https://www.coingecko.com/ru/new-cryptocurrencies"
API_BASE = "https://api.coingecko.com/api/v3"

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
MAX_COINS = 50

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': os.environ.get('DB_HOST', 'localhost'),
    'port': os.environ.get('DB_PORT', '5432'),
    'database': os.environ.get('DB_NAME', 'crypto_db'),
    'user': os.environ.get('DB_USER', 'crypto_user'),
    'password': os.environ.get('DB_PASSWORD', 'crypto_password')
}


def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}", flush=True)
        return None


def create_ssl_context():
    """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤"""
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
    return context


def fetch_page():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {BASE_URL}", flush=True)

    try:
        req = urllib.request.Request(BASE_URL)
        req.add_header('User-Agent',
                       'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36')
        req.add_header('Accept',
                       'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8')
        req.add_header('Accept-Language', 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7')
        req.add_header('Accept-Encoding', 'gzip, deflate')
        req.add_header('Connection', 'keep-alive')
        req.add_header('Upgrade-Insecure-Requests', '1')

        context = create_ssl_context()
        response = urllib.request.urlopen(req, context=context, timeout=30)

        if response.info().get('Content-Encoding') == 'gzip':
            import gzip
            html = gzip.decompress(response.read()).decode('utf-8')
        else:
            html = response.read().decode('utf-8')

        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(html)} –±–∞–π—Ç", flush=True)
        return html

    except urllib.error.HTTPError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.code} {e.reason}", flush=True)
        if e.code == 403:
            print("üí° CoinGecko –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN", flush=True)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}", flush=True)
        return None


def search_coin_id(coin_name, coin_symbol, retry_count=0):
    """–ò—â–µ—Ç ID –º–æ–Ω–µ—Ç—ã –≤ CoinGecko API"""
    print(f"  üîç –ü–æ–∏—Å–∫ ID –¥–ª—è {coin_name} ({coin_symbol})...", flush=True)

    search_query = coin_symbol.lower()
    url = f"{API_BASE}/search?query={urllib.parse.quote(search_query)}"

    try:
        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'Mozilla/5.0')
        req.add_header('Accept', 'application/json')

        context = create_ssl_context()
        response = urllib.request.urlopen(req, context=context, timeout=15)
        data = json.loads(response.read().decode('utf-8'))

        if 'coins' in data:
            for coin in data['coins']:
                if coin.get('symbol', '').upper() == coin_symbol.upper():
                    found_id = coin['id']
                    found_name = coin.get('name', '')
                    found_symbol = coin.get('symbol', '').upper()

                    print(f"    üìå –ù–∞–π–¥–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç: {found_name} ({found_symbol}) - ID: {found_id}", flush=True)

                    if coin_name.lower() in found_name.lower() or found_name.lower() in coin_name.lower():
                        print(f"    ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å–∏–º–≤–æ–ª—É", flush=True)
                        return found_id

        # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        search_query = coin_name.lower()
        url = f"{API_BASE}/search?query={urllib.parse.quote(search_query)}"

        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'Mozilla/5.0')
        req.add_header('Accept', 'application/json')

        response = urllib.request.urlopen(req, context=context, timeout=15)
        data = json.loads(response.read().decode('utf-8'))

        if 'coins' in data and len(data['coins']) > 0:
            for coin in data['coins'][:5]:
                found_id = coin['id']
                found_symbol = coin.get('symbol', '').upper()

                if found_symbol == coin_symbol.upper():
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª—É", flush=True)
                    return found_id

    except urllib.error.HTTPError as e:
        if e.code == 429 and retry_count < 3:
            wait_time = 60 * (retry_count + 1)
            print(f"    ‚ö†Ô∏è Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...", flush=True)
            time.sleep(wait_time)
            return search_coin_id(coin_name, coin_symbol, retry_count + 1)
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", flush=True)
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", flush=True)

    return None


def fetch_ohlc_data(coin_id, days=30, retry_count=0):
    """–ü–æ–ª—É—á–∞–µ—Ç OHLCV –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
    url = f"{API_BASE}/coins/{coin_id}/ohlc?vs_currency=usd&days={days}"

    try:
        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'Mozilla/5.0')
        req.add_header('Accept', 'application/json')

        context = create_ssl_context()
        response = urllib.request.urlopen(req, context=context, timeout=15)

        data = json.loads(response.read().decode('utf-8'))

        if data and len(data) > 0:
            ohlc_processed = []

            for candle in data:
                if len(candle) >= 5:
                    timestamp = candle[0]
                    dt = datetime.fromtimestamp(timestamp / 1000)

                    ohlc_processed.append({
                        'timestamp': timestamp,
                        'datetime': dt.isoformat(),
                        'date': dt.strftime('%Y-%m-%d'),
                        'time': dt.strftime('%H:%M:%S'),
                        'open': candle[1],
                        'high': candle[2],
                        'low': candle[3],
                        'close': candle[4]
                    })

            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ohlc_processed)} 4-—á–∞—Å–æ–≤—ã—Ö OHLC —Å–≤–µ—á–µ–π", flush=True)
            return ohlc_processed

    except urllib.error.HTTPError as e:
        if e.code == 404:
            print(f"    ‚ö†Ô∏è OHLC –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", flush=True)
        elif e.code == 429:
            if retry_count < 3:
                print(f"    ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...", flush=True)
                time.sleep(60)
                print(f"    üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLC –¥–ª—è {coin_id}...", flush=True)
                return fetch_ohlc_data(coin_id, days, retry_count + 1)
            else:
                print(f"    ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OHLC", flush=True)
        else:
            print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ {e.code}", flush=True)
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}", flush=True)

    return None


def is_older_than_two_days(added_date_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–∞—Ä—à–µ –ª–∏ –º–æ–Ω–µ—Ç–∞ –¥–≤—É—Ö –¥–Ω–µ–π"""
    try:
        added_date = datetime.strptime(added_date_str, '%Y-%m-%d')
        now = datetime.now()
        days_diff = (now - added_date).days
        return days_diff >= 2
    except:
        return False


def parse_html_limited(html, limit=MAX_COINS):
    """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö"""
    print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ HTML (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limit} –º–æ–Ω–µ—Ç)...", flush=True)

    cryptos = []

    try:
        table_pattern = r'<tr[^>]*class="[^"]*hover:tw-bg[^"]*"[^>]*>(.*?)</tr>'
        rows = re.findall(table_pattern, html, re.DOTALL)

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}", flush=True)
        print(f"üéØ –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {limit} —Å—Ç—Ä–æ–∫", flush=True)

        rows_to_process = rows[:limit] if len(rows) > limit else rows

        for i, row in enumerate(rows_to_process):
            try:
                crypto = parse_row(row)
                if crypto:
                    cryptos.append(crypto)
                    print(f"‚úÖ [{i + 1}/{limit}] –ù–∞–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: {crypto['name']} ({crypto['symbol']})", flush=True)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i + 1}: {e}", flush=True)
                continue

        return cryptos

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}", flush=True)
        return []


def parse_row(row_html):
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã"""
    crypto = {}

    td_pattern = r'<td[^>]*>(.*?)</td>'
    cells = re.findall(td_pattern, row_html, re.DOTALL)

    if len(cells) < 11:
        return None

    # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Å–∏–º–≤–æ–ª–∞
    name_cell = cells[2]
    text_pattern = r'>([^<>]+)<'
    all_texts = re.findall(text_pattern, name_cell)

    crypto['name'] = "Unknown"
    crypto['symbol'] = ""

    for text in all_texts:
        clean = text.strip()
        if clean and len(clean) > 1:
            if not clean.startswith('$') and not clean.startswith('%') and not clean.replace(',', '').replace('.',
                                                                                                              '').isdigit():
                if any(c.isalpha() for c in clean):
                    if len(clean) > 5 or not clean.isupper():
                        crypto['name'] = clean
                        break
                    elif crypto['symbol'] == "":
                        crypto['symbol'] = clean

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    if crypto['name'] == "Unknown":
        img_pattern = r'<img[^>]*alt="([^"]+)"[^>]*>'
        img_match = re.search(img_pattern, name_cell)
        if img_match:
            crypto['name'] = img_match.group(1).strip()

    if crypto['name'] == "Unknown":
        title_pattern = r'title="([^"]+)"'
        title_matches = re.findall(title_pattern, name_cell)
        for title in title_matches:
            if title and len(title) > 2 and not title.startswith('$'):
                crypto['name'] = title
                break

    # –ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞
    if not crypto['symbol']:
        for text in all_texts:
            clean = text.strip()
            if clean and 2 <= len(clean) <= 10 and clean.isupper() and clean.isalpha():
                crypto['symbol'] = clean
                break

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    crypto['price'] = clean_text(cells[3]) if len(cells) > 3 else "N/A"

    change_text = clean_text(cells[4]) if len(cells) > 4 else ""
    percent_match = re.search(r'([-+]?\d+[,.]?\d*%)', change_text)
    if percent_match:
        crypto['change_24h'] = percent_match.group(1)
    else:
        crypto['change_24h'] = change_text if change_text else "N/A"

    crypto['chain'] = clean_text(cells[5]) if len(cells) > 5 else "Unknown"
    crypto['market_cap'] = clean_text(cells[7]) if len(cells) > 7 else "N/A"
    crypto['fdv'] = clean_text(cells[9]) if len(cells) > 9 else "N/A"

    added_text = clean_text(cells[10]) if len(cells) > 10 else "–Ω–µ–¥–∞–≤–Ω–æ"
    crypto['added'] = parse_added_date(added_text)
    crypto['added_raw'] = added_text

    crypto['parsed_at'] = datetime.now().isoformat()

    return crypto


def clean_text(html):
    """–û—á–∏—â–∞–µ—Ç HTML –æ—Ç —Ç–µ–≥–æ–≤"""
    text = re.sub(r'<[^>]+>', '', html)
    text = ' '.join(text.split())
    return text.strip()


def parse_added_date(added_text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"""
    now = datetime.now()

    if "–Ω–µ–¥–∞–≤–Ω–æ" in added_text:
        return (now - timedelta(minutes=30)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ 1 —á–∞—Å–∞" in added_text:
        return (now - timedelta(hours=1)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ" in added_text and "—á–∞—Å" in added_text:
        hours_match = re.search(r'–æ–∫–æ–ª–æ (\d+) —á–∞—Å', added_text)
        if hours_match:
            hours = int(hours_match.group(1))
            return (now - timedelta(hours=hours)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ 1 –¥–Ω—è" in added_text or "–æ–∫–æ–ª–æ –¥–Ω—è" in added_text:
        return (now - timedelta(days=1)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ" in added_text and "–¥–Ω" in added_text:
        days_match = re.search(r'–æ–∫–æ–ª–æ (\d+) –¥–Ω', added_text)
        if days_match:
            days = int(days_match.group(1))
            return (now - timedelta(days=days)).strftime('%Y-%m-%d')
    elif "–¥–Ω" in added_text:
        days_match = re.search(r'(\d+)\s*–¥–Ω', added_text)
        if days_match:
            days = int(days_match.group(1))
            return (now - timedelta(days=days)).strftime('%Y-%m-%d')

    return now.strftime('%Y-%m-%d')


def save_to_database_with_separate_tables(cryptos):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –¥–ª—è OHLC"""
    conn = get_db_connection()
    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", flush=True)
        return

    cursor = conn.cursor()
    saved_count = 0
    updated_count = 0
    ohlc_saved_count = 0

    try:
        for crypto in cryptos:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                cursor.execute("""
                    SELECT id, ohlc_table_name FROM cryptocurrencies 
                    WHERE symbol = %s AND added_date = %s
                """, (crypto['symbol'], crypto['added']))

                existing = cursor.fetchone()

                if existing:
                    crypto_id = existing[0]
                    ohlc_table_name = existing[1]

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
                    cursor.execute("""
                        UPDATE cryptocurrencies SET
                            name = %s,
                            chain = %s,
                            price = %s,
                            change_24h = %s,
                            market_cap = %s,
                            fdv = %s,
                            added_raw = %s,
                            coin_gecko_id = %s
                        WHERE id = %s
                    """, (
                        crypto['name'],
                        crypto['chain'],
                        crypto['price'],
                        crypto['change_24h'],
                        crypto['market_cap'],
                        crypto['fdv'],
                        crypto['added_raw'],
                        crypto.get('coin_id'),
                        crypto_id
                    ))
                    updated_count += 1
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É (—Ç—Ä–∏–≥–≥–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç OHLC —Ç–∞–±–ª–∏—Ü—É)
                    cursor.execute("""
                        INSERT INTO cryptocurrencies 
                        (name, symbol, chain, price, change_24h, market_cap, fdv, 
                         added_date, added_raw, coin_gecko_id)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                        RETURNING id, ohlc_table_name
                    """, (
                        crypto['name'],
                        crypto['symbol'],
                        crypto['chain'],
                        crypto['price'],
                        crypto['change_24h'],
                        crypto['market_cap'],
                        crypto['fdv'],
                        crypto['added'],
                        crypto['added_raw'],
                        crypto.get('coin_id')
                    ))
                    result = cursor.fetchone()
                    crypto_id = result[0]
                    ohlc_table_name = result[1]
                    saved_count += 1
                    print(f"    üìä –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ OHLC: {ohlc_table_name}", flush=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º OHLC –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                if 'ohlcv' in crypto and crypto['ohlcv'] and ohlc_table_name:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ timestamp –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
                    cursor.execute(f"""
                        SELECT timestamp FROM {ohlc_table_name}
                    """)
                    existing_timestamps = set(row[0] for row in cursor.fetchall())

                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)
                    new_ohlc_data = []
                    for candle in crypto['ohlcv']:
                        if candle['timestamp'] not in existing_timestamps:
                            new_ohlc_data.append((
                                candle['timestamp'],
                                datetime.fromisoformat(candle['datetime']),
                                datetime.strptime(candle['date'], '%Y-%m-%d').date(),
                                datetime.strptime(candle['time'], '%H:%M:%S').time(),
                                float(candle['open']),
                                float(candle['high']),
                                float(candle['low']),
                                float(candle['close'])
                            ))

                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ OHLC –¥–∞–Ω–Ω—ã–µ
                    if new_ohlc_data:
                        insert_query = f"""
                            INSERT INTO {ohlc_table_name} 
                            (timestamp, datetime, date, time, open, high, low, close)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                            ON CONFLICT (timestamp) DO NOTHING
                        """
                        cursor.executemany(insert_query, new_ohlc_data)
                        ohlc_saved_count += len(new_ohlc_data)

                conn.commit()

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {crypto['name']}: {e}", flush=True)
                conn.rollback()
                continue

        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:", flush=True)
        print(f"   - –ù–æ–≤—ã—Ö –º–æ–Ω–µ—Ç: {saved_count}", flush=True)
        print(f"   - –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–Ω–µ—Ç: {updated_count}", flush=True)
        print(f"   - –ù–æ–≤—ã—Ö OHLC –∑–∞–ø–∏—Å–µ–π: {ohlc_saved_count}", flush=True)

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}", flush=True)
        conn.rollback()
    finally:
        cursor.close()
        conn.close()


def get_database_stats_separate_tables():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    conn = get_db_connection()
    if not conn:
        return None

    cursor = conn.cursor(cursor_factory=RealDictCursor)
    stats = {}

    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
        cursor.execute("SELECT COUNT(*) as total FROM cryptocurrencies")
        stats['total_cryptos'] = cursor.fetchone()['total']

        # –ú–æ–Ω–µ—Ç—ã —Å OHLC —Ç–∞–±–ª–∏—Ü–∞–º–∏
        cursor.execute("""
            SELECT COUNT(*) as with_ohlc 
            FROM cryptocurrencies 
            WHERE ohlc_table_name IS NOT NULL
        """)
        stats['cryptos_with_ohlc'] = cursor.fetchone()['with_ohlc']

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ OHLC
        cursor.execute("""
            SELECT 
                c.name, 
                c.symbol, 
                c.ohlc_table_name,
                c.added_date
            FROM cryptocurrencies c
            WHERE c.ohlc_table_name IS NOT NULL
            ORDER BY c.first_seen_at DESC
            LIMIT 10
        """)

        recent_cryptos = []
        for row in cursor.fetchall():
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ OHLC —Ç–∞–±–ª–∏—Ü–µ
            try:
                cursor.execute(f"SELECT COUNT(*) as count FROM {row['ohlc_table_name']}")
                ohlc_count = cursor.fetchone()['count']
            except:
                ohlc_count = 0

            recent_cryptos.append({
                'name': row['name'],
                'symbol': row['symbol'],
                'added_date': row['added_date'],
                'ohlc_table': row['ohlc_table_name'],
                'ohlc_count': ohlc_count
            })

        stats['recent_cryptos'] = recent_cryptos

        return stats

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", flush=True)
        return None
    finally:
        cursor.close()
        conn.close()


def main():
    print("=" * 80, flush=True)
    print("üöÄ –ü–ê–†–°–ï–† –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ –° –û–¢–î–ï–õ–¨–ù–´–ú–ò –¢–ê–ë–õ–ò–¶–ê–ú–ò OHLC", flush=True)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", flush=True)
    print("=" * 80 + "\n", flush=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = get_db_connection()
    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", flush=True)
        sys.exit(1)
    else:
        conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n", flush=True)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:", flush=True)
    stats = get_database_stats_separate_tables()
    if stats:
        print(f"   - –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {stats['total_cryptos']}", flush=True)
        print(f"   - –ú–æ–Ω–µ—Ç —Å OHLC —Ç–∞–±–ª–∏—Ü–∞–º–∏: {stats['cryptos_with_ohlc']}", flush=True)

        if stats['recent_cryptos']:
            print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–Ω–µ—Ç—ã —Å OHLC:", flush=True)
            for crypto in stats['recent_cryptos'][:5]:
                print(
                    f"   - {crypto['name']} ({crypto['symbol']}) - —Ç–∞–±–ª–∏—Ü–∞: {crypto['ohlc_table']}, –∑–∞–ø–∏—Å–µ–π: {crypto['ohlc_count']}",
                    flush=True)
        print()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    html = fetch_page()

    if not html:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", flush=True)
        return

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    cryptos = parse_html_limited(html, limit=MAX_COINS)

    if cryptos:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(cryptos)} –º–æ–Ω–µ—Ç", flush=True)

        # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–ª—è –º–æ–Ω–µ—Ç —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π
        print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ 4-—á–∞—Å–æ–≤—ã—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–µ—Ç —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π...\n", flush=True)

        ohlcv_count = 0
        for crypto in cryptos:
            if is_older_than_two_days(crypto['added']):
                print(f"üîç {crypto['name']} ({crypto['symbol']}) - –º–æ–Ω–µ—Ç–∞ —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π", flush=True)

                # –ò—â–µ–º ID –º–æ–Ω–µ—Ç—ã
                coin_id = search_coin_id(crypto['name'], crypto['symbol'])

                if coin_id:
                    time.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API

                    # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
                    ohlcv = fetch_ohlc_data(coin_id, days=30)

                    if ohlcv:
                        crypto['ohlcv'] = ohlcv
                        crypto['coin_id'] = coin_id
                        ohlcv_count += 1
                else:
                    print(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –º–æ–Ω–µ—Ç—ã\n", flush=True)
            else:
                print(f"‚ÑπÔ∏è {crypto['name']} ({crypto['symbol']}) - –º–æ–Ω–µ—Ç–∞ –º–ª–∞–¥—à–µ 2 –¥–Ω–µ–π, OHLC –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", flush=True)

        print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ OHLCV –¥–ª—è {ohlcv_count} –º–æ–Ω–µ—Ç", flush=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
        save_to_database_with_separate_tables(cryptos)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:", flush=True)
        stats = get_database_stats_separate_tables()
        if stats:
            print(f"   - –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {stats['total_cryptos']}", flush=True)
            print(f"   - –ú–æ–Ω–µ—Ç —Å OHLC —Ç–∞–±–ª–∏—Ü–∞–º–∏: {stats['cryptos_with_ohlc']}", flush=True)

    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö", flush=True)

    print("\n‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É", flush=True)
    print("=" * 80 + "\n", flush=True)


if __name__ == "__main__":
    main()