#!/usr/bin/env python3
import urllib.request
import urllib.parse
import json
import os
import re
from datetime import datetime, timedelta
import time
import ssl

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–æ–≤—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
BASE_URL = "https://www.coingecko.com/ru/new-cryptocurrencies"


def create_ssl_context():
    """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤"""
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
    return context


def fetch_page():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {BASE_URL}", flush=True)

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        req = urllib.request.Request(BASE_URL)
        req.add_header('User-Agent',
                       'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36')
        req.add_header('Accept',
                       'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8')
        req.add_header('Accept-Language', 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7')
        req.add_header('Accept-Encoding', 'gzip, deflate')
        req.add_header('Connection', 'keep-alive')
        req.add_header('Upgrade-Insecure-Requests', '1')

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        context = create_ssl_context()
        response = urllib.request.urlopen(req, context=context, timeout=30)

        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        if response.info().get('Content-Encoding') == 'gzip':
            import gzip
            html = gzip.decompress(response.read()).decode('utf-8')
        else:
            html = response.read().decode('utf-8')

        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(html)} –±–∞–π—Ç", flush=True)
        return html

    except urllib.error.HTTPError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.code} {e.reason}", flush=True)
        if e.code == 403:
            print("üí° CoinGecko –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN", flush=True)
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}", flush=True)
        return None


def parse_html(html):
    """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö"""
    print("üîç –ü–∞—Ä—Å–∏–Ω–≥ HTML...", flush=True)

    cryptos = []

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        save_html_debug(html)

        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        table_pattern = r'<tr[^>]*class="[^"]*hover:tw-bg[^"]*"[^>]*>(.*?)</tr>'
        rows = re.findall(table_pattern, html, re.DOTALL)

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}", flush=True)

        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        if rows and len(rows) > 0:
            print("üîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...", flush=True)
            analyze_first_row(rows[0])

        for i, row in enumerate(rows):
            try:
                crypto = parse_row(row)
                if crypto:
                    cryptos.append(crypto)
                    print(f"‚úÖ [{i + 1}] –ù–∞–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: {crypto['name']} ({crypto['symbol']})", flush=True)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i + 1}: {e}", flush=True)
                continue

        return cryptos

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}", flush=True)
        return []


def analyze_first_row(row_html):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("\n--- –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ô –°–¢–†–û–ö–ò ---", flush=True)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
    td_pattern = r'<td[^>]*>(.*?)</td>'
    cells = re.findall(td_pattern, row_html, re.DOTALL)

    print(f"–ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫: {len(cells)}", flush=True)

    if len(cells) > 2:
        print(f"\n–Ø—á–µ–π–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–∏–Ω–¥–µ–∫—Å 2):", flush=True)
        name_cell = cells[2]
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        print(name_cell[:500] + "..." if len(name_cell) > 500 else name_cell, flush=True)

        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
        links = re.findall(r'<a[^>]*>([^<]+)</a>', name_cell)
        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}", flush=True)
        for i, link in enumerate(links):
            print(f"  –°—Å—ã–ª–∫–∞ {i + 1}: {link.strip()}", flush=True)

        # –ò—â–µ–º –≤—Å–µ span
        spans = re.findall(r'<span[^>]*>([^<]+)</span>', name_cell)
        print(f"\n–ù–∞–π–¥–µ–Ω–æ span: {len(spans)}", flush=True)
        for i, span in enumerate(spans[:5]):  # –ü–µ—Ä–≤—ã–µ 5
            print(f"  Span {i + 1}: {span.strip()}", flush=True)

    print("--- –ö–û–ù–ï–¶ –ê–ù–ê–õ–ò–ó–ê ---\n", flush=True)


def parse_row(row_html):
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã"""
    crypto = {}

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ <td>
    td_pattern = r'<td[^>]*>(.*?)</td>'
    cells = re.findall(td_pattern, row_html, re.DOTALL)

    if len(cells) < 11:
        return None

    # –ò–Ω–¥–µ–∫—Å 2 - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª
    name_cell = cells[2]

    # –û—Ç–ª–∞–¥–∫–∞ - –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã
    if 'debug_shown' not in globals():
        globals()['debug_shown'] = True
        print("\n=== –û–¢–õ–ê–î–ö–ê –Ø–ß–ï–ô–ö–ò –° –ù–ê–ó–í–ê–ù–ò–ï–ú ===")
        print(name_cell[:1000])
        print("=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===\n")

    # –ò—â–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–≥–æ–≤
    text_pattern = r'>([^<>]+)<'
    all_texts = re.findall(text_pattern, name_cell)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –∏—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    crypto['name'] = "Unknown"
    crypto['symbol'] = ""

    # –û—Ç–ª–∞–¥–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã
    if len(all_texts) > 0 and 'texts_shown' not in globals():
        globals()['texts_shown'] = True
        print("\n=== –í–°–ï –ù–ê–ô–î–ï–ù–ù–´–ï –¢–ï–ö–°–¢–´ ===")
        for i, text in enumerate(all_texts):
            clean = text.strip()
            if clean:
                print(f"{i}: '{clean}'")
        print("=== –ö–û–ù–ï–¶ –¢–ï–ö–°–¢–û–í ===\n")

    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
    for text in all_texts:
        clean = text.strip()
        if clean and len(clean) > 1:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∏—Å–ª–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if not clean.startswith('$') and not clean.startswith('%') and not clean.replace(',', '').replace('.',
                                                                                                              '').isdigit():
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                if any(c.isalpha() for c in clean):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–∏–º–≤–æ–ª–æ–º (–æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
                    if len(clean) > 5 or not clean.isupper():
                        crypto['name'] = clean
                        break
                    elif crypto['symbol'] == "":
                        crypto['symbol'] = clean

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∏—â–µ–º –≤ img alt –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    if crypto['name'] == "Unknown":
        img_pattern = r'<img[^>]*alt="([^"]+)"[^>]*>'
        img_match = re.search(img_pattern, name_cell)
        if img_match:
            crypto['name'] = img_match.group(1).strip()

    # –ï—â–µ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ - –∏—â–µ–º –≤ title –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    if crypto['name'] == "Unknown":
        title_pattern = r'title="([^"]+)"'
        title_matches = re.findall(title_pattern, name_cell)
        for title in title_matches:
            if title and len(title) > 2 and not title.startswith('$'):
                crypto['name'] = title
                break

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏
    if not crypto['symbol']:
        # –ò—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        for text in all_texts:
            clean = text.strip()
            if clean and 2 <= len(clean) <= 10 and clean.isupper() and clean.isalpha():
                crypto['symbol'] = clean
                break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ data- –∞—Ç—Ä–∏–±—É—Ç—ã
    if crypto['name'] == "Unknown":
        data_pattern = r'data-[^=]+=["\'"]([^"\']+)["\'"]'
        data_matches = re.findall(data_pattern, name_cell)
        for data in data_matches:
            if data and len(data) > 2 and any(c.isalpha() for c in data) and not data.startswith('/'):
                crypto['name'] = data
                break

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–∞—Ä—Å–∏–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    # –ò–Ω–¥–µ–∫—Å 3 - —Ü–µ–Ω–∞
    price_text = clean_text(cells[3]) if len(cells) > 3 else ""
    crypto['price'] = price_text if price_text else "N/A"

    # –ò–Ω–¥–µ–∫—Å 4 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á
    change_text = clean_text(cells[4]) if len(cells) > 4 else ""
    percent_match = re.search(r'([-+]?\d+[,.]?\d*%)', change_text)
    if percent_match:
        crypto['change_24h'] = percent_match.group(1)
    else:
        crypto['change_24h'] = change_text if change_text else "N/A"

    # –ò–Ω–¥–µ–∫—Å 5 - –±–ª–æ–∫—á–µ–π–Ω/–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
    crypto['chain'] = clean_text(cells[5]) if len(cells) > 5 else "Unknown"

    # –ò–Ω–¥–µ–∫—Å 7 - Market Cap
    crypto['market_cap'] = clean_text(cells[7]) if len(cells) > 7 else "N/A"

    # –ò–Ω–¥–µ–∫—Å 9 - FDV
    crypto['fdv'] = clean_text(cells[9]) if len(cells) > 9 else "N/A"

    # –ò–Ω–¥–µ–∫—Å 10 - –¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    added_text = clean_text(cells[10]) if len(cells) > 10 else "–Ω–µ–¥–∞–≤–Ω–æ"
    crypto['added'] = parse_added_date(added_text)
    crypto['added_raw'] = added_text

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    crypto['parsed_at'] = datetime.now().isoformat()

    return crypto


def clean_text(html):
    """–û—á–∏—â–∞–µ—Ç HTML –æ—Ç —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
    text = re.sub(r'<[^>]+>', '', html)
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = ' '.join(text.split())
    return text.strip()


def parse_added_date(added_text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"""
    now = datetime.now()

    if "–Ω–µ–¥–∞–≤–Ω–æ" in added_text:
        return (now - timedelta(minutes=30)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ 1 —á–∞—Å–∞" in added_text:
        return (now - timedelta(hours=1)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ" in added_text and "—á–∞—Å" in added_text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        hours_match = re.search(r'–æ–∫–æ–ª–æ (\d+) —á–∞—Å', added_text)
        if hours_match:
            hours = int(hours_match.group(1))
            return (now - timedelta(hours=hours)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ 1 –¥–Ω—è" in added_text or "–æ–∫–æ–ª–æ –¥–Ω—è" in added_text:
        return (now - timedelta(days=1)).strftime('%Y-%m-%d')
    elif "–æ–∫–æ–ª–æ" in added_text and "–¥–Ω" in added_text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days_match = re.search(r'–æ–∫–æ–ª–æ (\d+) –¥–Ω', added_text)
        if days_match:
            days = int(days_match.group(1))
            return (now - timedelta(days=days)).strftime('%Y-%m-%d')
    elif "–¥–Ω" in added_text:
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç "1 –¥–µ–Ω—å", "2 –¥–Ω—è"
        days_match = re.search(r'(\d+)\s*–¥–Ω', added_text)
        if days_match:
            days = int(days_match.group(1))
            return (now - timedelta(days=days)).strftime('%Y-%m-%d')

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
    return now.strftime('%Y-%m-%d')


def save_html_debug(html):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        log_dir = get_log_dir()
        debug_file = os.path.join(log_dir, 'last_page.html')
        with open(debug_file, 'w', encoding='utf-8') as f:
            f.write(html)
        print(f"üîç HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {debug_file}", flush=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML: {e}", flush=True)


def get_log_dir():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤"""
    for path in ['/app/logs', './logs', '.']:
        if os.path.exists(path) and os.access(path, os.W_OK):
            return path
        try:
            os.makedirs(path, exist_ok=True)
            return path
        except:
            continue
    return '.'


def save_data(cryptos):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON"""
    log_dir = get_log_dir()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
    data = {
        'timestamp': datetime.now().isoformat(),
        'source': BASE_URL,
        'count': len(cryptos),
        'cryptos': cryptos
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    data_file = os.path.join(log_dir, 'new_cryptos.json')
    try:
        with open(data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {data_file}", flush=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", flush=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history_file = os.path.join(log_dir, f'cryptos_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
    try:
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üìÑ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {history_file}", flush=True)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}", flush=True)


def generate_report(cryptos):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    log_dir = get_log_dir()
    report_file = os.path.join(log_dir, 'new_cryptos_report.txt')

    try:
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("=" * 60 + "\n")
            f.write("–ù–û–í–´–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ –ù–ê COINGECKO\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {BASE_URL}\n")
            f.write("=" * 60 + "\n\n")

            f.write(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(cryptos)} –º–æ–Ω–µ—Ç\n\n")

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            platforms = {}
            for crypto in cryptos:
                platform = crypto.get('chain', 'Unknown')
                if platform not in platforms:
                    platforms[platform] = []
                platforms[platform].append(crypto)

            f.write("–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–õ–ê–¢–§–û–†–ú–ê–ú:\n")
            for platform, coins in sorted(platforms.items(), key=lambda x: len(x[1]), reverse=True):
                f.write(f"  {platform}: {len(coins)} –º–æ–Ω–µ—Ç\n")

            f.write("\n" + "-" * 60 + "\n")
            f.write("–°–ü–ò–°–û–ö –ú–û–ù–ï–¢:\n\n")

            for i, crypto in enumerate(cryptos, 1):
                f.write(f"{i}. {crypto['name']} ({crypto['symbol']})\n")
                f.write(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {crypto['chain']}\n")
                f.write(f"   –¶–µ–Ω–∞: {crypto['price']}\n")
                f.write(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {crypto['change_24h']}\n")
                f.write(f"   Market Cap: {crypto['market_cap']}\n")
                f.write(f"   FDV: {crypto['fdv']}\n")
                f.write(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {crypto['added_raw']} ({crypto['added']})\n")
                f.write("\n")

        print(f"üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}", flush=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}", flush=True)


def main():
    print("=" * 60, flush=True)
    print("üöÄ –ü–ê–†–°–ï–† –ù–û–í–´–• –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ COINGECKO", flush=True)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", flush=True)
    print("=" * 60 + "\n", flush=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    html = fetch_page()

    if not html:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", flush=True)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        save_data([])
        return

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    cryptos = parse_html(html)

    if cryptos:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(cryptos)} –º–æ–Ω–µ—Ç", flush=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        save_data(cryptos)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        generate_report(cryptos)

        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print("\nüìà –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:", flush=True)
        for crypto in cryptos[:5]:
            print(f"  ‚Ä¢ {crypto['name']} ({crypto['symbol']}) - {crypto['chain']} - {crypto['price']}", flush=True)
        if len(cryptos) > 5:
            print(f"  ... –∏ –µ—â–µ {len(cryptos) - 5} –º–æ–Ω–µ—Ç", flush=True)
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö", flush=True)
        save_data([])

    print("\n‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É", flush=True)
    print("=" * 60 + "\n", flush=True)


if __name__ == "__main__":
    main()