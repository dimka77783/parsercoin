from selenium import webdriver
from bs4 import BeautifulSoup
import csv
import time
import os
from datetime import datetime, timedelta

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0 Safari/537.36',
}

BASE_URL = "https://www.coingecko.com/ru"


def setup_browser():
    """–°–æ–∑–¥–∞—ë—Ç –¥—Ä–∞–π–≤–µ—Ä –±—Ä–∞—É–∑–µ—Ä–∞"""
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    options.add_argument('blink-settings=imagesEnabled=false')

    driver = webdriver.Chrome(options=options)
    return driver


def parse_added_date(added_text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î"""
    now = datetime.now()
    if "–æ–∫–æ–ª–æ 1 —á–∞—Å–∞" in added_text:
        added_date = now - timedelta(hours=1)
    elif "–æ–∫–æ–ª–æ 1 –¥–Ω—è" in added_text:
        added_date = now - timedelta(days=1)
    elif "–æ–∫–æ–ª–æ 2 –¥–Ω–µ–π" in added_text:
        added_date = now - timedelta(days=2)
    elif "–Ω–µ–¥–∞–≤–Ω–æ" in added_text:
        added_date = now - timedelta(minutes=30)
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–∞—Ç—ã
        try:
            added_date = datetime.strptime(added_text, '%Y-%m-%d')
        except ValueError:
            added_date = now - timedelta(hours=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –æ–∫–æ–ª–æ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥

    return added_date.strftime('%Y-%m-%d')


def fetch_new_cryptos(limit=3):
    url = "https://www.coingecko.com/ru/new-cryptocurrencies"
    print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")

    driver = setup_browser()
    driver.get(url)
    time.sleep(5)  # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ JS
    html = driver.page_source
    driver.quit()

    with open("selenium_debug.html", "w", encoding="utf-8") as f:
        f.write(html)

    soup = BeautifulSoup(html, 'html.parser')

    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏
    table = soup.find('table', {'class': lambda c: c and 'tw-border-y' in c and 'tw-border-gray-200' in c and 'dark:tw-border-moon-700' in c and 'tw-divide-y' in c and 'tw-divide-gray-200' in c and 'dark:tw-divide-moon-700' in c and '[&>tbody:first-of-type]:!tw-border-t-0' in c and 'tw-w-full' in c and 'sortable' in c})
    if not table:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–æ–≤—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏")
        return []

    # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
    rows = table.find_all('tr', {'class': lambda c: c and 'hover:tw-bg' in c})

    if not rows:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏")
        return []

    cryptos = []
    count = 0

    for row in rows:
        cols = row.find_all('td')
        if len(cols) < 10:
            print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(cols)}")
            continue

        name_tag = cols[2].find('a')
        name = name_tag.get_text(strip=True) if name_tag else "–ë–µ–∑ –∏–º–µ–Ω–∏"

        chain = cols[5].get_text(strip=True) if len(cols) > 5 else "‚Äì"

        fdv = cols[9].get_text(strip=True) if len(cols) > 9 else "N/A"

        added_text = cols[10].get_text(strip=True) if len(cols) > 10 else "‚Äì"
        added_date = parse_added_date(added_text)

        cryptos.append({
            'name': name,
            'chain': chain,
            'fdv': fdv,
            'added': added_date
        })

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: {name} ‚Üí FDV: {fdv}, –î–æ–±–∞–≤–ª–µ–Ω: {added_date}")
        count += 1

        if count >= limit:
            break

        time.sleep(2)

    save_crypto_data_to_csv(cryptos)
    return cryptos


def save_crypto_data_to_csv(data, filename="new_cryptocurrencies_full.csv"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö –≤ CSV"""
    fieldnames = ['name', 'chain', 'fdv', 'added']

    try:
        with open(filename, mode='w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(data)
        print(f"\n‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {os.path.abspath(filename)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ full CSV: {e}")


if __name__ == "__main__":
    print("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...\n")
    new_cryptos = fetch_new_cryptos(limit=3)

    if new_cryptos:
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç: {len(new_cryptos)}")
    else:
        print("\n‚ùå –ù–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")