#!/bin/bash

# Crypto Parser - –∑–∞–ø—É—Å–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ PostgreSQL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
export DB_HOST="${DB_HOST:-localhost}"
export DB_PORT="${DB_PORT:-5432}"
export DB_NAME="${DB_NAME:-crypto_db}"
export DB_USER="${DB_USER:-crypto_user}"
export DB_PASSWORD="${DB_PASSWORD:-crypto_password}"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_DIR="$SCRIPT_DIR/logs"
LOG_FILE="$LOG_DIR/parser_$(date +%Y%m%d_%H%M%S).log"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p "$LOG_DIR"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
log "======================================"
log "üöÄ –ó–∞–ø—É—Å–∫ Crypto Parser"
log "======================================"
log "–ë–î: $DB_USER@$DB_HOST:$DB_PORT/$DB_NAME"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î..."
if python3 "$SCRIPT_DIR/test_db_connection.py" >> "$LOG_FILE" 2>&1; then
    log "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ"
else
    log "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"
    log "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω:"
    log "  docker ps | grep crypto_postgres"
    exit 1
fi

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –∑–∞–ø—É—Å–∫–∞
if [ -f "$SCRIPT_DIR/parser_ohlcv_db.py" ]; then
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ë–î
    log "üìä –ó–∞–ø—É—Å–∫ parser_ohlcv_db.py (–≤–µ—Ä—Å–∏—è —Å –ë–î)..."
    cd "$SCRIPT_DIR"
    python3 parser_ohlcv_db.py >> "$LOG_FILE" 2>&1
    RESULT=$?
elif [ -f "$SCRIPT_DIR/load_json_to_db.py" ] && [ -f "$SCRIPT_DIR/parser_ohlcv.py" ]; then
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é + –∑–∞–≥—Ä—É–∑—á–∏–∫
    log "üìä –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ load_json_to_db.py..."
    cd "$SCRIPT_DIR"
    python3 load_json_to_db.py >> "$LOG_FILE" 2>&1
    RESULT=$?
else
    log "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä—Å–µ—Ä!"
    log "–ù–µ–æ–±—Ö–æ–¥–∏–º –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤:"
    log "  - parser_ohlcv_db.py"
    log "  - parser_ohlcv.py + load_json_to_db.py"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if [ $RESULT -eq 0 ]; then
    log "‚úÖ –ü–∞—Ä—Å–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    log "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:"
    python3 -c "
import psycopg2
conn = psycopg2.connect(
    host='$DB_HOST',
    port='$DB_PORT',
    database='$DB_NAME',
    user='$DB_USER',
    password='$DB_PASSWORD'
)
cur = conn.cursor()
cur.execute('SELECT COUNT(*) FROM cryptocurrencies')
total = cur.fetchone()[0]
cur.execute('SELECT COUNT(DISTINCT crypto_id) FROM ohlc_data')
with_ohlc = cur.fetchone()[0]
print(f'   –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {total}')
print(f'   –ú–æ–Ω–µ—Ç —Å OHLC: {with_ohlc}')
conn.close()
" | tee -a "$LOG_FILE"
else
    log "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ (–∫–æ–¥: $RESULT)"
fi

log "======================================"
log "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
log "–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $LOG_FILE"
log "======================================